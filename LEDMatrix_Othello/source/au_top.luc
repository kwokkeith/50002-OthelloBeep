module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output outled,           // to LED strip, Br pin C49, connect LED Strip to 5V for power
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal

  const LEDCOLOR = {
    64x{hFF0000}}; // hFF0000, h00FF00, h0000FF, blue for the third LED, red for the second LED, green for the first LED (nearest to the connector)
  
  ws2812b_writer led_strip(#PIXEL_COUNT(64), .clk(clk), .rst(rst)); //set for 64 pixels
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    usb_tx = usb_rx;        // loop serial port
    
    led = 8h00;             // turn LEDs off
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    

    led_strip.update=1; //sample write 
    
    // TODO: KEITH
    // led_strip.pixel will count from 0 to 63 (all 64 pixels)
    // for each pixel, I want to check P1, P2, VALID_BIT grid.
    // using led_strip.pixel to index. (i.e. P1[led_strip.pixel])
    // if (P1[led_strip.pixel] == b1), do: 
    //   send red color to led_strip.color (i.e. led_strip.color = h00FF00)
    // ** replace line 49 with appropriate if-else statements to check for each grid 
    // ** remove line 17 and 18 since we are sending color hex directly to led_strip.color
 
    led_strip.color=LEDCOLOR[led_strip.pixel]; 
    outled=led_strip.led;
  }
}