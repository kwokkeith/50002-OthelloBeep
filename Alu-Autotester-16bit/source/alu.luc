module alu (
    input a[16],
    input b[16],
    input alufn_signal[6],
    output out[16],
    output zvn[3],
    output random_number_signal
    ) {
 
  adder adderUnit;
  boolean booleanUnit;
  shifter shifterUnit;
  compare compareUnit; 

  
  sig z;
  sig v;
  sig n;
  
  
  always {
    random_number_signal = b0;  // default alufn not generating random number
                      
    adderUnit.alufn_signal = alufn_signal;
    adderUnit.a = a;
    adderUnit.b = b;
    
    z = adderUnit.z;
    v = adderUnit.v;
    n = adderUnit.n; 
    
    zvn[0] = z;
    zvn[1] = v;
    zvn[2] = n;
     
    
    compareUnit.alufn_signal = alufn_signal;
    compareUnit.z = z;
    compareUnit.v = v;
    compareUnit.n = n;
    
    booleanUnit.alufn_signal = alufn_signal;
    booleanUnit.a = a;
    booleanUnit.b = b;
    
    shifterUnit.alufn_signal = alufn_signal;
    shifterUnit.a = a;
    shifterUnit.b = b;
    
    case(alufn_signal[5:4]){
      b00 : out = adderUnit.out;
      b01 : out = booleanUnit.out;
      b10 : out = shifterUnit.out;
      b11 : out = compareUnit.out;
      default: out = 16b0;
    }
      
    if (alufn_signal == b000010){
      out = a*b; // fast multiplier hack
    }
    
    // a/3 + b ALUFN function (Divide by 3 Estimate)
    if (alufn_signal == b000100){
      out = ((a * 85) >> 8) + b1 + b; 
   }
    
    // generate random number 
    // 1. <a> represents d0-d3 to adjust speed of random generatopr, <b> represents 14 bit for random seed 
    // 2. outputs c{a[1:0],b[13:0]} to be fed to random_number_unit
    if (alufn_signal == b101010){
      out = c{a[1:0], b[13:0]};
      random_number_signal = b1;      // send random_number_signal as high to indicate alufn is in generate random number
}
