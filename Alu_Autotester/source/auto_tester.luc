module auto_tester (
    input clk,  // clock
    input rst,  // reset
    output out[67], // output from tester
//    input debug_mode,     // to get from au_top that debug mode is on
    input next_error_state, // Signal to move to next error state
    input new_test,         // to indicate new test
    output success_signal,    // to indicate alu passed the test
    output error_mode_signal, // to indicate to turn on led for error mode
    output alu_a[64],
    output alu_b[64],
    output alufn[6],
    input alu_out[67],
    output dotest_signal,         // To signal to the alu that the tester is doing the test
    output correct_output_signal  // to send to au_top to indicate test is in correct output
  ) {
  
//  alu alu(.clk(clk));      // alu unit
  
  const SLOWCLOCK_SIZE = 25;
  counter slowClock(#SIZE(SLOWCLOCK_SIZE), .clk(clk), .rst(rst));
  edge_detector slowClockEdge(.clk(clk), #RISE(1), #FALL(0));
  
  dff current_state[12](.clk(clk), .rst(rst));
  fsm test_state(.clk(clk), .rst(rst)) = {DOTEST, SUCCESS, ERROR};
  fsm error_states(.clk(clk), .rst(rst)) = { ID, ALUFN, CORRECT };
  
  sig correctOutput[64];  // store correct alufn output
  sig correctZVN[3];      // store correct zvn
  sig currentState[12];    // store current state
  sig aluoutzvn[3];       // zvn output from alu
  const TEST_CASES =
  {  
  
    // Addition Test Cases || Format (alu_a, alu_b, alu_out, alu_fn, zvn, idx_of_test) 
    	c{64h0, 64h0, 64h0, 6b0, 3b100, 12d01}, // 0 + 0 = 0, zvn =  100
    	c{64h7FFF, 64h0000, 64h7FFF, 6b0, 3b000, 12d02}, // x + 0 = x, zvn =  000
    	c{64h0000, 64h7FFF, 64h7FFF, 6b0, 3b000, 12d03}, // 0 + x = x, zvn =  000
    	c{64hFFFFFFFFFFFFFFFF, 64h0000, 64hFFFFFFFFFFFFFFFF, 6b0, 3b001, 12d04}, // (-x) + 0 = (-x), zvn =  001
    	c{64h0000, 64hFFFFFFFFFFFFFFFF, 64hFFFFFFFFFFFFFFFF, 6b0, 3b001, 12d05}, // 0 + (-x) = (-x), zvn =  001
    	c{64h1234000000000000, 64h4567000000000000, 64h7579000000000000, 6b0, 3b000, 12d06}, // 0x1234000000000000 + 0x4567000000000000 = 0x579B000000000000, zvn =  000
    	c{64hFFFFFFFFFFFFF801, 64hFFFFFFFFFFFFF820, 64hFFFFFFFFFFFFF021, 6b0, 3b001, 12d07}, // 0xFFFFFFFFFFFFF801 + 0xFFFFFFFFFFFFF820 = 0xFFFFFFFFFFFFF021, zvn =  001
    	c{64hFFFFFFFFFFFFDE00, 64h00AD, 64hFFFFFFFFFFFFDEAD, 6b0, 3b001, 12d08}, // 0xFFFFFFFFFFFFDE00 (-ve) + 0x00AD (+ve) = 0xFFFFFFFFFFFFDEAD (-ve) , zvn =  001
    	c{64h00EF, 64hFFFFFFFFFFFFBE00, 64hFFFFFFFFFFFFBEEF, 6b0, 3b001, 12d09}, // 0x00EF (+ve) + 0xFFFFFFFFFFFFBE00 (-ve) = 0xFFFFFFFFFFFFBEEF, zvn =  001
    	c{64hFFFFFFFFFFFFFFFF, 64hFFFFFFFFFFFFFFFF, 64hFFFFFFFFFFFFFFFE, 6b0, 3b001, 12d10}, // 0xFFFFFFFFFFFFFFFF (-ve) + 0xFFFFFFFFFFFFFFFF (-ve) = 0xFFFFFFFFFFFFFFFE (-ve), zvn =  001
    	c{64h7000000000000000, 64h7000000000000000, 64hE000000000000000, 6b0, 3b011, 12d11}, // Positive Overflow, zvn =  011
    	c{64hFFFFFFFFFFFFBFFF, 64hFFFFFFFFFFFF8001, 64hFFFFFFFFFFFF4000, 6b0, 3b010, 12d12}, // Negative Overflow, zvn =  010
    	
        
    	// Subtraction Test Cases
    	c{64h0000, 64h0000, 64h0000, 6b1, 3b100, 12d13}, // 0 - 0 = 0, zvn =  100
    	c{64h7FFF, 64h0000, 64h7FFF, 6b1, 3b000, 12d14}, // x - 0 = x, zvn =  000
    	c{64h0000, 64hFFFFFFFFFFFF7FFF, 64hFFFFFFFFFFFF8001, 6b1, 3b001, 12d15}, // 0 - x = (-x), zvn =  001
    	c{64hFFFFFFFFFFFFFFFF, 64h0000, 64hFFFFFFFFFFFFFFFF, 6b1, 3b001, 12d16}, // (-x) - 0 = (-x), zvn =  001
    	c{64h0000, 64hFFFFFFFFFFFFFFFF, 64h0000000000000001, 6b1, 3b000, 12d17}, // 0 - (-x) = x, zvn =  000
    	c{64hFFFFFFFFFFFFFFFF, 64hFFFFFFFFFFFFBFFF, 64h4000, 6b1, 3b000, 12d18}, // 0xFFFFFFFFFFFFFFFF - 0xFFFFFFFFFFFFBFFF = 0x4000, zvn =  000   ( (-ve) - (-ve) )
    	c{64h7654, 64h5432, 64h2222, 6b1, 3b000, 12d19}, // 0x7654 - 0x5432 = 0x2222, (a - b), zvn =  000 ( (+ve) - (+ve) = +ve )
    	c{64h5432, 64h7654, 64hFFFFFFFFFFFFDDDE, 6b1, 3b001, 12d20}, // 0x5432 - 0x7654 = 0xFFFFFFFFFFFFDDDE (a - b), zvn =  001 ( (+ve) - (+ve) = -ve )
    	c{64hFFFFFFFFFFFFEDCB, 64hFFFFFFFFFFFFDCBA, 64h1111, 6b1, 3b000, 12d21}, // 0xFFFFFFFFFFFFEDCB - 0xFFFFFFFFFFFFDCBA = 0x1111 (a - b), zvn =  000 ( (-ve) - (-ve) = +ve )
    	c{64hFFFFFFFFFFFFDCBA, 64hFFFFFFFFFFFFEDCB, 64hFFFFFFFFFFFFEEEF, 6b1, 3b001, 12d22}, // 0xFFFFFFFFFFFFDCBA - 0xFFFFFFFFFFFFEDCB = 0xFFFFFFFFFFFFEEEF (a - b), zvn =  001 ( (-ve) - (-ve) = -ve )
    	c{64h7FFFFFFFFFFFFFFF, 64h8000000000000000, 64hFFFFFFFFFFFFFFFF, 6b1, 3b011, 12d23}, // 0x7FFFFFFFFFFFFFFF - 0x8000000000000000 = 0xFFFFFFFFFFFFFFFF (a - b), zvn =  011 ( (+ve) - (-ve) = -ve ) (Overflow) 
    	c{64h8000000000000000, 64h7FFFFFFFFFFFFFFF, 64h1, 6b1, 3b010, 12d24}, // 0x8000000000000000 - 0x7FFFFFFFFFFFFFFF = 0x1 (a - b), zvn =  010 ( (-ve) - (+ve) = +ve ) (Overflow)
        
    	// Multiplication Test Cases
    	c{64h0004, 64hFFFFFFFFFFFFFFFE, 64hFFFFFFFFFFFFFFF8, 6b000010, 3b000, 12d25}, // (0x0004 * 0xFFFFFFFFFFFFFFFE) = 0xFFFFFFFFFFFFFFF8, zvn =  000 ( +ve * -ve )
    	c{64h0004, 64h0004, 64h0010, 6b000010, 3b000, 12d26}, // (0x0004 * 0x0004) = 0x0010, zvn =  000 ( +ve * +ve )
    	c{64hFFFFFFFFFFFFFFFE, 64h0004, 64hFFFFFFFFFFFFFFF8, 6b000010, 3b000, 12d27}, // (0xFFFFFFFFFFFFFFFE * 0x0004) = 0xFFFFFFFFFFFFFFF8, zvn = 000 ( -ve * +ve )
    	c{64hFFFFFFFFFFFFFFFF, 64hFFFFFFFFFFFFFFFF, 64h0001, 6b000010, 3b001, 12d28}, // (0xFFFFFFFFFFFFFFFF * 0xFFFFFFFFFFFFFFFF) = 0x0001, zvn = 001 ( -ve * -ve )
    	c{64h0000, 64h0000, 64h0000, 6b000010, 3b100, 12d29}, // (0x0000 * 0x0000) = 0x0000, zvn =  100  ( 0 * 0 )
    	c{64h0000, 64h4FFF, 64h0000, 6b000010, 3b000, 12d30}, // (0x0000 * 0x4FFF) = 0x0000, zvn =  000  ( 0 * +ve )
    	c{64h4FFF, 64h0000, 64h0000, 6b000010, 3b000, 12d31}, // (0x4FFF * 0x0000) = 0x0000, zvn = 000 ( +ve * 0 )
    	c{64h0000, 64hFFFFFFFFFFFFFFFF, 64h0000, 6b000010, 3b001, 12d32}, // (0x0000 * 0xFFFFFFFFFFFFFFFF) = 0x0000, zvn = 001 ( 0 * -ve )
    	c{64hFFFFFFFFFFFFFFFF, 64h0000, 64h0000, 6b000010, 3b001, 12d33}, // (0xFFFFFFFFFFFFFFFF * 0x0000) = 0x0000, zvn = 001 ( -ve * 0 )
    	c{64h0001, 64h0001, 64h0001, 6b000010, 3b000, 12d34}, // (0x0001 * 0x0001) = 0x0001, zvn = 000 ( 1 * 1 )
        
        	// Shifter Test Cases	
    	c{64h000F, 64h00F0, 64h0000, 6b100000, 3b000, 12d35}, // 0x000F << 0x00F0 = 0x0, zvn =  000      (Shift Left out of boundary)
    	c{64h000F, 64h0005, 64h01E0, 6b100000, 3b000, 12d36}, // 0x000F << 0x0005 = 0x01E0, zvn =  000   (Shift Left within boundary)
    	c{64hF000, 64h00F0, 64h0000, 6b100001, 3b001, 12d37}, // 0xF000 >> 0x00F0 = 0x0, zvn =  001      (Shift Right out of boundary)
    	c{64hF000, 64h0005, 64h0780, 6b100001, 3b001, 12d38}, // 0xF000 >> 0x0005 = 0x0780, zvn =  001   (Shift Right within boundary)
    	c{64hF000, 64h00F0, 64hFFFFFFFFFFFFFFFF, 6b100011, 3b001, 12d39}, // 0xF000 >>> 0x00F0 = 0xFFFF, zvn =  001  (Shift Right Arithmetically out of boundary)
    	c{64hF000, 64h0005, 64hFF80, 6b100011, 3b001, 12d40}, // 0xF000 >>> 0x0005 = 0xFF80, zvn =  001  (Shift Right Arithmetically within boundary)
        
        	// Comparison Test Cases
    	c{64h7654, 64h5432, 64h0000, 6b110011, 3b000, 12d41}, // (0x7654 == 0x5432) = b0, zvn =  000
    	c{64h7654, 64h5432, 64h0000, 6b110101, 3b000, 12d42}, // (0x7654 < 0x5432) = b0, zvn =  000 
    	c{64h7654, 64h5432, 64h0000, 6b110111, 3b000, 12d43}, // (0x7654 <= 0x5432) = b0, zvn =  000 
    	c{64h7654, 64h5432, 64h0001, 6b111101, 3b000, 12d44}, // (0x7654 > 0x5432) = b1, zvn =  000
    	c{64h7654, 64h5432, 64h0001, 6b111111, 3b000, 12d45}, // (0x7654 >= 0x5432) = b1, zvn =  000 
        
        	// a (+ve) <= b (+ve)
    	c{64h5432, 64h7654, 64h0000, 6b110011, 3b001, 12d46}, // (0x5432 == 0x7654) = b0, zvn =  001 
    	c{64h5432, 64h7654, 64h0001, 6b110101, 3b001, 12d47}, // (0x5432 < 0x7654) = b1, zvn =  001  
    	c{64h5432, 64h7654, 64h0001, 6b110111, 3b001, 12d48}, // (0x5432 <= 0x7654) = b1, zvn =  001
    	c{64h5432, 64h7654, 64h0000, 6b111101, 3b001, 12d49}, // (0x5432 > 0x7654) = b0, zvn =  001
    	c{64h5432, 64h7654, 64h0000, 6b111111, 3b001, 12d50}, // (0x5432 >= 0x7654) = b0, zvn =  001
       
    	// a (-ve) >= b (-ve)	
    	c{64hFFFFFFFFFFFFEDCB, 64hFFFFFFFFFFFFDCBA, 64h0000, 6b110011, 3b000, 12d51}, // (0xFFFFFFFFFFFFEDCB == 0xFFFFFFFFFFFFDCBA) = b0, zvn =  000 
    	c{64hFFFFFFFFFFFFEDCB, 64hFFFFFFFFFFFFDCBA, 64h0000, 6b110101, 3b000, 12d52}, // (0xFFFFFFFFFFFFEDCB < 0xFFFFFFFFFFFFDCBA) = b0, zvn =  000 
    	c{64hFFFFFFFFFFFFEDCB, 64hFFFFFFFFFFFFDCBA, 64h0000, 6b110111, 3b000, 12d53}, // (0xFFFFFFFFFFFFEDCB <= 0xFFFFFFFFFFFFDCBA) = b0, zvn =  000
    	c{64hFFFFFFFFFFFFEDCB, 64hFFFFFFFFFFFFDCBA, 64h0001, 6b111101, 3b000, 12d54}, // (0xFFFFFFFFFFFFEDCB > 0xFFFFFFFFFFFFDCBA) = b1, zvn =  000 
    	c{64hFFFFFFFFFFFFEDCB, 64hFFFFFFFFFFFFDCBA, 64h0001, 6b111111, 3b000, 12d55}, // (0xFFFFFFFFFFFFEDCB >= 0xFFFFFFFFFFFFDCBA) = b1, zvn =  000
      
     	// a (-ve) <= b (-ve)	
    	c{64hFFFFFFFFFFFFDCBA, 64hFFFFFFFFFFFFEDCB, 64h0000, 6b110011, 3b001, 12d56}, // (0xFFFFFFFFFFFFDCBA == 0xFFFFFFFFFFFFEDCB) = b0, zvn =  001 
    	c{64hFFFFFFFFFFFFDCBA, 64hFFFFFFFFFFFFEDCB, 64h0001, 6b110101, 3b001, 12d57}, // (0xFFFFFFFFFFFFDCBA < 0xFFFFFFFFFFFFEDCB) = b1, zvn =  001 
    	c{64hFFFFFFFFFFFFDCBA, 64hFFFFFFFFFFFFEDCB, 64h0001, 6b110111, 3b001, 12d58}, // (0xFFFFFFFFFFFFDCBA <= 0xFFFFFFFFFFFFEDCB) = b1, zvn =  001
    	c{64hFFFFFFFFFFFFDCBA, 64hFFFFFFFFFFFFEDCB, 64h0000, 6b111101, 3b001, 12d59}, // (0xFFFFFFFFFFFFDCBA > 0xFFFFFFFFFFFFEDCB) = b0, zvn =  001 
    	c{64hFFFFFFFFFFFFDCBA, 64hFFFFFFFFFFFFEDCB, 64h0000, 6b111111, 3b001, 12d60}, // (0xFFFFFFFFFFFFDCBA >= 0xFFFFFFFFFFFFEDCB) = b0, zvn =  001 
        
     	// a (+ve) >= b (-ve)	
    	c{64h7FFF, 64hFFFFFFFFFFFF8000, 64h0000, 6b110011, 3b011, 12d61}, // (0x7FFF == 0xFFFFFFFFFFFF8000) = b0, zvn =  011 
    	c{64h7FFF, 64hFFFFFFFFFFFF8000, 64h0000, 6b110101, 3b011, 12d62}, // (0x7FFF < 0xFFFFFFFFFFFF8000) = b0, zvn =  011 
    	c{64h7FFF, 64hFFFFFFFFFFFF8000, 64h0000, 6b110111, 3b011, 12d63}, // (0x7FFF <= 0xFFFFFFFFFFFF8000) = b0, zvn =  011 
    	c{64h7FFF, 64hFFFFFFFFFFFF8000, 64h0001, 6b111101, 3b011, 12d64}, // (0x7FFF > 0xFFFFFFFFFFFF8000) = b1, zvn =  011 
    	c{64h7FFF, 64hFFFFFFFFFFFF8000, 64h0001, 6b111111, 3b011, 12d65}, // (0x7FFF >= 0xFFFFFFFFFFFF8000) = b1, zvn =  011
       
    	// a (-ve) <= b (+ve)	
    	c{64hFFFFFFFFFFFF8000, 64h7FFF, 64h0000, 6b110011, 3b010, 12d66}, // (0xFFFFFFFFFFFF8000 == 0x7FFF) = 0x0, zvn =  010 
    	c{64hFFFFFFFFFFFF8000, 64h7FFF, 64h0001, 6b110101, 3b010, 12d67}, // (0xFFFFFFFFFFFF8000 < 0x7FFF) = 0x1, zvn =  010
    	c{64hFFFFFFFFFFFF8000, 64h7FFF, 64h0001, 6b110111, 3b010, 12d68}, // (0xFFFFFFFFFFFF8000 <= 0x7FFF) = 0x1, zvn =  010 
    	c{64hFFFFFFFFFFFF8000, 64h7FFF, 64h0000, 6b111101, 3b010, 12d69}, // (0xFFFFFFFFFFFF8000 > 0x7FFF) = 0x0, zvn =  010
    	c{64hFFFFFFFFFFFF8000, 64h7FFF, 64h0000, 6b111111, 3b010, 12d70}, // (0xFFFFFFFFFFFF8000 >= 0x7FFF) = 0x0, zvn =  010
        
     	// 0 == 0	
    	c{64h0000, 64h0000, 64h0001, 6b110011, 3b100, 12d71}, // (0x0 == 0x0) = 0x1, zvn =  100
    	c{64h0000, 64h0000, 64h0000, 6b110101, 3b100, 12d72}, // (0x0 < 0x0) = 0x0, zvn =  100 
    	c{64h0000, 64h0000, 64h0001, 6b110111, 3b100, 12d73}, // (0x0 <= 0x0) = 0x1, zvn =  100
    	c{64h0000, 64h0000, 64h0000, 6b111101, 3b100, 12d74}, // (0x0 > 0x0) = 0x0, zvn =  100 
    	c{64h0000, 64h0000, 64h0001, 6b111111, 3b100, 12d75}, // (0x0 >= 0x0) = 0x1, zvn =  100 
   
     	// a (+ve) == b (+ve)	
    	c{64h7FFF, 64h7FFF, 64h0001, 6b110011, 3b100, 12d76}, // (0x7FFF == 0x7FFF) = 0x1, zvn =  100 
     c{64h7FFF, 64h7FFF, 64h0000, 6b110101, 3b100, 12d77}, // (0x7FFF < 0x7FFF) = 0x0, zvn =  100 
    	c{64h7FFF, 64h7FFF, 64h0000, 6b110101, 3b100, 12d78}, // (0x7FFF < 0x7FFF) = 0x0, zvn =  100 
    	c{64h7FFF, 64h7FFF, 64h0001, 6b110111, 3b100, 12d79}, // (0x7FFF <= 0x7FFF) = 0x1, zvn =  100 
    	c{64h7FFF, 64h7FFF, 64h0000, 6b111101, 3b100, 12d80}, // (0x7FFF > 0x7FFF) = 0x0, zvn =  100 
    	c{64h7FFF, 64h7FFF, 64h0001, 6b111111, 3b100, 12d81}, // (0x7FFF >= 0x7FFF) = 0x1, zvn =  100
        
     	// a (-ve) == b (-ve)	
    	c{64hFFFFFFFFFFFFEDCB, 64hFFFFFFFFFFFFEDCB, 64h0001, 6b110011, 3b100, 12d82}, // (0xFFFFFFFFFFFFEDCB == 0xFFFFFFFFFFFFEDCB) = 0x1, zvn =  100 
    	c{64hFFFFFFFFFFFFEDCB, 64hFFFFFFFFFFFFEDCB, 64h0000, 6b110101, 3b100, 12d83}, // (0xFFFFFFFFFFFFEDCB < 0xFFFFFFFFFFFFEDCB) = 0x0, zvn =  100 
    	c{64hFFFFFFFFFFFFEDCB, 64hFFFFFFFFFFFFEDCB, 64h0001, 6b110111, 3b100, 12d84}, // (0xFFFFFFFFFFFFEDCB <= 0xFFFFFFFFFFFFEDCB) = 0x1, zvn =  100
    	c{64hFFFFFFFFFFFFEDCB, 64hFFFFFFFFFFFFEDCB, 64h0000, 6b111101, 3b100, 12d85}, // (0xFFFFFFFFFFFFEDCB > 0xFFFFFFFFFFFFEDCB) = 0x0, zvn =  100 
    	c{64hFFFFFFFFFFFFEDCB, 64hFFFFFFFFFFFFEDCB, 64h0001, 6b111111, 3b100, 12d86}, // (0xFFFFFFFFFFFFEDCB >= 0xFFFFFFFFFFFFEDCB) = 0x1, zvn =  100
      
    	// 0 >= b (-ve)	
    	c{64h0000, 64hFFFFFFFFFFFFFFEF, 64h0000, 6b110011, 3b000, 12d87}, // (0x0000 == 0xFFFFFFFFFFFFFFEF) = 0x0, zvn = 000 (0 == -ve)
    	c{64h0000, 64hFFFFFFFFFFFFFFEF, 64h0000, 6b110101, 3b000, 12d88}, // (0x0000 < 0xFFFFFFFFFFFFFFEF) = 0x0, zvn = 000 (0 < -ve)
    	c{64h0000, 64hFFFFFFFFFFFFFFEF, 64h0000, 6b110111, 3b000, 12d89}, // (0x0000 <= 0xFFFFFFFFFFFFFFEF) = 0x0, zvn = 000 (0 <= -ve)
    	c{64h0000, 64hFFFFFFFFFFFFFFEF, 64h0001, 6b111101, 3b000, 12d90}, // (0x0000 > 0xFFFFFFFFFFFFFFEF) = 0x1, zvn = 000 (0 > -ve)
    	c{64h0000, 64hFFFFFFFFFFFFFFEF, 64h0001, 6b111111, 3b000, 12d91}, // (0x0000 >= 0xFFFFFFFFFFFFFFEF) = 0x1, zvn = 000 (0 >= -ve)
        
    	// 0 <= b (+ve)
    	c{64h0000, 64h7FEF, 64h0000, 6b110011, 3b001, 12d92}, // (0x0000 == 0x7FEF) = 0x0, zvn = 001 (0 == 0)
    	c{64h0000, 64h7FEF, 64h0001, 6b110101, 3b001, 12d93}, // (0x0000 < 0x7FEF) = 0x1, zvn = 001 (0 < +ve)
    	c{64h0000, 64h7FEF, 64h0001, 6b110111, 3b001, 12d94}, // (0x0000 <= 0x7FEF) = 0x1, zvn = 001 (0 <= +ve)
    	c{64h0000, 64h7FEF, 64h0000, 6b111101, 3b001, 12d95}, // (0x0000 > 0x7FEF) = 0x0, zvn = 001 (0 > +ve)
    	c{64h0000, 64h7FEF, 64h0000, 6b111111, 3b001, 12d96}, // (0x0000 >= 0x7FEF) = 0x0, zvn = 001 (0 >= +ve) 
        
    	// a (+ve) >= 0 
    	c{64h7FEF, 64h0000, 64h0000, 6b110011, 3b000, 12d97},  // (0x7FEF == 0x0000) = 0x0, zvn = 000 (+ve == 0)
    	c{64h7FEF, 64h0000, 64h0000, 6b110101, 3b000, 12d98}, // (0x7FEF < 0x0000) = 0x0, zvn = 000 (+ve < 0)
    	c{64h7FEF, 64h0000, 64h0000, 6b110111, 3b000, 12d99}, // (0x7FEF <= 0x0000) = 0x0, zvn = 000 (+ve <= 0)
    	c{64h7FEF, 64h0000, 64h0001, 6b111101, 3b000, 12d100}, // (0x7FEF > 0x0000) = 0x1, zvn = 000 (+ve > 0)
    	c{64h7FEF, 64h0000, 64h0001, 6b111111, 3b000, 12d101}, // (0x7FEF >= 0x0000) = 0x1, zvn = 000 (+ve >= 0)
    
    	// a (-ve) <= 0 	
    	c{64hFFFFFFFFFFFFFFEF, 64h0000, 64h0000, 6b110011, 3b001, 12d102}, // (0xFFFFFFFFFFFFFFEF == 0x0000) = 0x0, zvn = 001 (+ve == 0)
    	c{64hFFFFFFFFFFFFFFEF, 64h0000, 64h0001, 6b110101, 3b001, 12d103}, // (0xFFFFFFFFFFFFFFEF < 0x0000) = 0x1, zvn = 001 (+ve < 0)
    	c{64hFFFFFFFFFFFFFFEF, 64h0000, 64h0001, 6b110111, 3b001, 12d104}, // (0xFFFFFFFFFFFFFFEF <= 0x0000) = 0x1, zvn = 001 (+ve <= 0)
    	c{64hFFFFFFFFFFFFFFEF, 64h0000, 64h0000, 6b111101, 3b001, 12d105}, // (0xFFFFFFFFFFFFFFEF > 0x0000) = 0x0, zvn = 001 (+ve > 0)
    	c{64hFFFFFFFFFFFFFFEF, 64h0000, 64h0000, 6b111111, 3b001, 12d106}, // (0xFFFFFFFFFFFFFFEF >= 0x0000) = 0x0, zvn = 001 (+ve >= 0) 
                   
        	// Boolean Test Cases 
        	// AND	
    	c{64hFFFFFFFFFFFFBEEF, 64hFFFFFFFFFFFFFEED, 64hFFFFFFFFFFFFBEED, 6b011000, 3b001, 12d107}, // (0xFFFFFFFFFFFFBEEF & 0xFFFFFFFFFFFFFEED) = 0xFFFFFFFFFFFFBEED, zvn =  001 
    	c{64hFFFFFFFFFFFFDEAD, 64hFFFFFFFFFFFFBEEF, 64hFFFFFFFFFFFF9EAD, 6b011000, 3b001, 12d108}, // (0xFFFFFFFFFFFFDEAD & 0xFFFFFFFFFFFFBEEF) = 0xFFFFFFFFFFFF9EAD, zvn =  001 
    	c{64h00FF, 64h0FEF, 64h00EF, 6b011000, 3b000, 12d109}, // (0x00FF & 0x0FEF) = 0x00EF, zvn =  000
    	c{64hFFFFFFFFFFFFDEAD, 64h00FF, 64h00AD, 6b011000, 3b001, 12d110}, // (0xFFFFFFFFFFFFDEAD & 0x00FF) = 0x00FF, zvn =  001 (Masking)
    	c{64h0000, 64h0000, 64h0000, 6b011000, 3b100, 12d111}, // (0x0000 & 0x0000) = 0x0000, zvn =  100 (All zeroes)
    	c{64hFFFFFFFFFFFFFFFF, 64hFFFFFFFFFFFFFFFF, 64hFFFFFFFFFFFFFFFF, 6b011000, 3b001, 12d112}, // (0xFFFFFFFFFFFFFFFF & 0xFFFFFFFFFFFFFFFF) = 0xFFFFFFFFFFFFFFFF, zvn = 001 (All ones)
        
        	// OR
    	c{64hFFFFFFFFFFFFBEEF, 64hFFFFFFFFFFFFFEED, 64hFFFFFFFFFFFFFEEF, 6b011110, 3b001, 12d113}, // (0xFFFFFFFFFFFFBEEF & 0xFFFFFFFFFFFFFEED) = 0xFFFFFFFFFFFFFEEF, zvn =  001 
    	c{64hFFFFFFFFFFFFDEAD, 64hFFFFFFFFFFFFBEEF, 64hFFFFFFFFFFFFFEEF, 6b011110, 3b001, 12d114}, // (0xFFFFFFFFFFFFDEAD & 0xFFFFFFFFFFFFBEEF) = 0xFFFFFFFFFFFFFEEF, zvn =  001 
    	c{64h00FF, 64h0FEF, 64h0FFF, 6b011110, 3b000, 12d115}, // (0x00FF & 0x0FEF) = 0x0FFF, zvn =  000
    	c{64h0000, 64h0000, 64h0000, 6b011110, 3b100, 12d116}, // (0x0000 & 0x0000) = 0x0000, zvn =  100 (All zeroes)
    	c{64hFFFFFFFFFFFFFFFF, 64hFFFFFFFFFFFFFFFF, 64hFFFFFFFFFFFFFFFF, 6b011110, 3b001, 12d117}, // (0xFFFFFFFFFFFFFFFF & 0xFFFFFFFFFFFFFFFF) = 0xFFFFFFFFFFFFFFFF, zvn = 001 (All ones)
        
        	// XOR	
    	c{64hFFFFFFFFFFFFBEEF, 64hFFFFFFFFFFFFFEED, 64h4002, 6b010110, 3b001, 12d118}, // (0xFFFFFFFFFFFFBEEF ^ 0xFFFFFFFFFFFFFEED) = 0x4002, zvn =  000 
    	c{64hFFFFFFFFFFFFDEAD, 64hFFFFFFFFFFFFBEEF, 64h6042, 6b010110, 3b001, 12d119}, // (0xFFFFFFFFFFFFDEAD ^ 0xFFFFFFFFFFFFBEEF) = 0x6042, zvn =  001 
    	c{64hFFFFFFFFFFFFDEAD, 64h3EED, 64hFFFFFFFFFFFFE040, 6b010110, 3b000, 12d120}, // (0xFFFFFFFFFFFFDEAD ^ 0x3EED) = 0xFFFFFFFFFFFFE040, zvn =  000 
    	c{64h0000, 64h0000, 64h0000, 6b010110, 3b100, 12d121}, // (0x0000 ^ 0x0000) = 0x0000, zvn =  100 (All Zeroes)
    	c{64hFFFFFFFFFFFFFFFF, 64hFFFFFFFFFFFFFFFF, 64h0000, 6b010110, 3b001, 12d122} // (0xFFFFFFFFFFFFFFFF ^ 0xFFFFFFFFFFFFFFFF) = 0x0000, zvn =  001 (All Ones)
  };
  const MAXIMUM_TEST = 122;
  always {
    // To connect slow slowClock 
    slowClockEdge.in = slowClock.value[SLOWCLOCK_SIZE - 1];
    
    // ALU Connections
    alu_a = TEST_CASES[current_state.q][212:149];          // Take the current test <alu a> input  
    alu_b = TEST_CASES[current_state.q][148:85];          // Take the current test <alu b> input
    correctOutput = TEST_CASES[current_state.q][84:21];  // Output the current test <correct output>
    alufn = TEST_CASES[current_state.q][20:15];          // Take the current test <alufn code> output
    correctZVN = TEST_CASES[current_state.q][14:12];      // Output the current test <correct zvn>
    currentState = TEST_CASES[current_state.q][11:0];     // Output the current test (state) ID/label
    
    // Set default tester connections
    success_signal = b0;
    error_mode_signal = b0;
    correct_output_signal = b0;
    out = b0;
    aluoutzvn = c{alu_out[0], alu_out[1], alu_out[2]};
    dotest_signal = b0;
    
    // If new test (from pressing test button), start from beginning of test
    if (new_test == b1){
      test_state.d = test_state.DOTEST;
      current_state.d = MAXIMUM_TEST - 1; 
    }
    
    // If debug mode is on
      if (slowClockEdge.out == b1){
        case(test_state.q) {
          test_state.DOTEST: 
                // Cases that can ignore v
                if (current_state.q >= 25 && current_state.q <= 34){
                   if (alu_out[66:3] == correctOutput && c{aluoutzvn[0], aluoutzvn[2]} == c{correctZVN[0], correctZVN[2]}) {
                        if (current_state.q == b0){  // Last case is correct
                            test_state.d = test_state.SUCCESS;
                        }   
                        else {
                          current_state.d = current_state.q - 1;
                        }
                      }
                   else {
                     test_state.d = test_state.ERROR; 
                   }
                }
                if (alu_out[66:3] == correctOutput && aluoutzvn == correctZVN) {
                  if (current_state.q == b0){  // Last case is correct
                      test_state.d = test_state.SUCCESS;
                  }   
                  else {
                    current_state.d = current_state.q - 1;
                  }
                }
              // if incorrect move to error state
              else {
                 test_state.d = test_state.ERROR;
              }  
            }
        }
       case(test_state.q) {
         test_state.DOTEST: 
            out = c{8h00, currentState, 3b111};
            dotest_signal = b1;
          test_state.ERROR:
              error_mode_signal = d1;  // light up led to indicate error
            
              // toggle between error states when next error state button pressed
              if (next_error_state == b1) {
                  case(error_states.q) {
                    error_states.ID: error_states.d = error_states.ALUFN;
                    error_states.ALUFN: error_states.d = error_states.CORRECT; 
                    error_states.CORRECT: error_states.d = error_states.ID;
                    }
                  }
              
              case(error_states.q) {
                error_states.ID:
                      out = c{8h00, currentState, 3b111};    // Displays current state ID / Which test case
                error_states.ALUFN:
                      out = c{alu_out[66:3], aluoutzvn};     // Displays ALU output  (zvn from ALU is from [0] to [2] so flip it above)
                error_states.CORRECT:
                      out = c{correctOutput, correctZVN};    // Displays correct output
                      correct_output_signal = b1;            // Light up io_led to indicate in correct output
               }
           test_state.SUCCESS:
                  out = c{16d8888, 3b111};
                  success_signal = b1;        
    
    }  
}
