module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     
  ) {
  
  sig rst;                  // reset signal
  alu alu;     // ALU unit
  
  .clk(clk) {
    
    reset_conditioner reset_cond;                      // To sync reset with FPGA clock
    
    // ******************************************* 
    // ************ BUTTON COMPONENTS ************
    // *******************************************
    
    // Debug Button
    dff debug_button;                                           // Store debug button to move to test circuit mode
    button_conditioner debug_button_conditioner;                // Button Conditioner to move to initial FSM state
    edge_detector debug_button_edge(#RISE(1), #FALL(0));        // Edge detector for button press
    
    // Debug mode: next state (next protocol)                                      
    button_conditioner debug_nxtst_button_conditioner;          // next button (debug mode) to advance to next protocol
    edge_detector debug_nxtst_button_edge(#RISE(1), #FALL(0));  // Edge detector for button press
    
    
    // ******************************************** 
    // ************ TESTER COMPONENT ************
    // ********************************************
    
    auto_tester tester(.rst(rst));        // To test ALU functionality (Test Circuit)
    
    // ****************************************************** 
    // ************ A & B VAL MEMORY COMPONENTS *************
    // ******************************************************
    .rst(rst) {
      dff state_A[64];                    // DFF to store input of A
      dff state_B[64];                    // DFF to store input of B
      multi_seven_seg seg;    // Seven segment display
    }
  }
    
  // ********************************* 
  // ********** CONNECTIONS **********
  // ********************************* 
  
  always {
    reset_cond.in = ~rst_n;  // input raw inverted reset signal
    rst = reset_cond.out;    // conditioned reset
    
    led = c{3b0, io_button}; // connect buttons to LEDs
    
    usb_tx = usb_rx;         // loop serial port
    
    io_led = 3x{{h00}};      // set led by default to be off
    io_seg = 8hff;           // connect segments to the driver
    io_sel = 4hf;            // connect digit select to the driver
    
    // ******************************************** 
    // ************ BUTTONS CONNECTION ************
    // ********************************************
       
    // Debug Button (To change to test mode)
    debug_button_conditioner.in = io_button[2]; // bottom button
    debug_button_edge.in = debug_button_conditioner.out;
    debug_button.d = debug_button_edge.out;
    tester.new_test = b0;
    // If debug Button is pressed, then set program flow state to debug state
    if (debug_button.q) {
       debug_button.d = b0;
       tester.new_test = b1;
    }
    
    // To set default for debug buttons    
    debug_nxtst_button_conditioner.in = b0;
    debug_nxtst_button_conditioner.in = io_button[3];
    debug_nxtst_button_edge.in = debug_nxtst_button_conditioner.out;
     
    // *********************************  
    // ******* TESTER CONNECTIONS ******
    // ********************************* 
    
    tester.next_error_state = debug_nxtst_button_edge.out; // If during error mode button is pressed to toggle between outputs
    tester.alu_out = b0;
    
    // *********************************  
    // ******** ALU CONNECTIONS ********
    // ********************************* 
    alu.a = state_A.q;
    alu.b = state_B.q;
    tester.alu_out = c{alu.out, alu.zvn};  
    
    // set multi_seven_seg default value
    seg.values = {4b0, 4b0, 4b0, 4b0};
     
    // Number on 7-segment display
    io_seg = ~seg.seg;
    io_sel = ~seg.sel;    
    
    // ********************************* 
    // ******** FLOW OF PROGRAM ********
    // ********************************* 
   
    // *************************** 
    // ****** DEBUG MODE *********
    // *************************** 
    state_A.d = tester.alu_a;                   // set tester's alu a output to state A dff
    state_B.d = tester.alu_b;                   // set tester's alu b output to state B dff
    alu.alufn_signal = tester.alufn;            // Pass tester's alufn to the alu 
    
    // Display outputs        
    // Bits on LED
    
    // Output from tester if NOT DOING TEST
    case (io_dip[0]){
      h00:  // [15:0]
        io_led[1] = tester.out[18:11];
        io_led[0] = tester.out[10:3];
        seg.values = {tester.out[18:15], tester.out[14:11], tester.out[10:7], tester.out[6:3]};
      h01:
        io_led[1] = tester.out[34:27];
        io_led[0] = tester.out[26:19];
        seg.values = {tester.out[34:31], tester.out[30:27], tester.out[26:23], tester.out[22:19]};
      h02:  
        io_led[1] = tester.out[50:43];
        io_led[0] = tester.out[42:35];
        seg.values = {tester.out[50:47], tester.out[46:43], tester.out[42:39], tester.out[38:35]};
      h03:
        io_led[1] = tester.out[66:59];
        io_led[0] = tester.out[58:51];
        seg.values = {tester.out[66:63], tester.out[62:59], tester.out[58:55], tester.out[54:51]};
    }
    
    // Output from tester WHEN DOING tester
    // The below configuration will output the label of the test number
    if (tester.dotest_signal) {
      io_led[1] = tester.out[18:11];
      io_led[0] = tester.out[10:3];
      seg.values = {tester.out[18:15], tester.out[14:11], tester.out[10:7], tester.out[6:3]};
    }
    
    
    // For zvn
    io_led[2][7] = tester.out[2];   // z is at Left-most bit of io_led[2]
    io_led[2][6] = tester.out[1];   // v the next bit to the right of z
    io_led[2][5] = tester.out[0];   // n the next bit to the right of v
  
    // LED to indicate correct output module
    if (tester.correct_output_signal == b1) {
      io_led[2][4] = b1;
    }
  
    // Light up when tester in error module
    io_led[2][0] = tester.error_mode_signal;  
    io_led[2][1] = tester.error_mode_signal;
    
    // if successfully finish
    if (tester.success_signal == b1) {
       io_led[0] = 8hFF;
       io_led[1] = 8hFF;
       io_led[2] = 8hFF;
       seg.values = {4h8, 4h8, 4h8, 4h8};
    }
}