/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module motherboard_1 (
    input clk,
    input rst,
    input slowclk,
    output reg [31:0] id,
    output reg [31:0] ia,
    output reg [63:0] debug,
    input [3:0] debug_register_index,
    output reg [63:0] debug_reg_content,
    output reg led_matrix_output,
    output reg [1:0] led_current_player,
    input [4:0] playerButtoninput,
    input valid_led_on,
    input buzzer_on,
    input reset_signal,
    output reg [7:0] led_player_timer,
    output reg buzzer_output
  );
  
  
  
  wire [32-1:0] M_beta_ia;
  wire [64-1:0] M_beta_debug;
  wire [1-1:0] M_beta_led_matrix_output;
  wire [2-1:0] M_beta_led_current_player;
  wire [8-1:0] M_beta_led_player_timer;
  wire [64-1:0] M_beta_debug_reg_content;
  wire [1-1:0] M_beta_buzzer_output;
  reg [1-1:0] M_beta_slowclk;
  reg [1-1:0] M_beta_rst;
  reg [32-1:0] M_beta_instruction;
  reg [5-1:0] M_beta_playerButtoninput;
  reg [1-1:0] M_beta_valid_led_on;
  reg [1-1:0] M_beta_buzzer_on;
  reg [1-1:0] M_beta_reset_signal;
  reg [4-1:0] M_beta_debug_register_index;
  beta_cpu_8 beta (
    .clk(clk),
    .slowclk(M_beta_slowclk),
    .rst(M_beta_rst),
    .instruction(M_beta_instruction),
    .playerButtoninput(M_beta_playerButtoninput),
    .valid_led_on(M_beta_valid_led_on),
    .buzzer_on(M_beta_buzzer_on),
    .reset_signal(M_beta_reset_signal),
    .debug_register_index(M_beta_debug_register_index),
    .ia(M_beta_ia),
    .debug(M_beta_debug),
    .led_matrix_output(M_beta_led_matrix_output),
    .led_current_player(M_beta_led_current_player),
    .led_player_timer(M_beta_led_player_timer),
    .debug_reg_content(M_beta_debug_reg_content),
    .buzzer_output(M_beta_buzzer_output)
  );
  
  localparam MEMORY_SIZE = 10'h2a8;
  
  wire [32-1:0] M_instruction_unit_out;
  reg [10-1:0] M_instruction_unit_addr;
  instruction_rom_9 instruction_unit (
    .addr(M_instruction_unit_addr),
    .out(M_instruction_unit_out)
  );
  
  wire [32-1:0] M_memory_unit_id;
  reg [12-1:0] M_memory_unit_ia;
  reg [1-1:0] M_memory_unit_instruction_write_enable;
  reg [32-1:0] M_memory_unit_instruction_towrite;
  memory_unit_10 memory_unit (
    .clk(clk),
    .ia(M_memory_unit_ia),
    .instruction_write_enable(M_memory_unit_instruction_write_enable),
    .instruction_towrite(M_memory_unit_instruction_towrite),
    .id(M_memory_unit_id)
  );
  
  reg [9:0] M_writer_counter_d, M_writer_counter_q = 1'h0;
  
  
  localparam INSTRUCTIONLOAD_motherboard = 1'd0;
  localparam RUN_motherboard = 1'd1;
  
  reg M_motherboard_d, M_motherboard_q = INSTRUCTIONLOAD_motherboard;
  
  always @* begin
    M_motherboard_d = M_motherboard_q;
    M_writer_counter_d = M_writer_counter_q;
    
    M_instruction_unit_addr = 1'h0;
    M_beta_slowclk = slowclk;
    M_beta_rst = rst;
    M_beta_playerButtoninput = playerButtoninput;
    M_beta_valid_led_on = valid_led_on;
    M_beta_reset_signal = reset_signal;
    M_beta_buzzer_on = buzzer_on;
    M_beta_debug_register_index = debug_register_index;
    debug_reg_content = M_beta_debug_reg_content;
    led_matrix_output = M_beta_led_matrix_output;
    led_current_player = M_beta_led_current_player;
    led_player_timer = M_beta_led_player_timer;
    buzzer_output = M_beta_buzzer_output;
    M_beta_instruction = M_memory_unit_id;
    M_memory_unit_ia = M_beta_ia;
    M_memory_unit_instruction_write_enable = 1'h0;
    M_memory_unit_instruction_towrite = 32'h00000000;
    
    case (M_motherboard_q)
      INSTRUCTIONLOAD_motherboard: begin
        M_beta_rst = 1'h1;
        M_writer_counter_d = M_writer_counter_q + 1'h1;
        M_instruction_unit_addr = M_writer_counter_q;
        M_memory_unit_instruction_towrite = M_instruction_unit_out;
        M_memory_unit_instruction_write_enable = 1'h1;
        M_memory_unit_ia = M_writer_counter_q << 2'h2;
        if ((M_writer_counter_q + 1'h1) == 10'h2a8) begin
          M_motherboard_d = RUN_motherboard;
        end
      end
      RUN_motherboard: begin
        M_motherboard_d = RUN_motherboard;
      end
    endcase
    ia = M_beta_ia;
    id = M_memory_unit_id;
    debug = M_beta_debug;
    debug_reg_content = M_beta_debug_reg_content;
  end
  
  always @(posedge clk) begin
    M_motherboard_q <= M_motherboard_d;
  end
  
  
  always @(posedge clk) begin
    M_writer_counter_q <= M_writer_counter_d;
  end
  
endmodule
