/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module au_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input usb_rx,
    output reg usb_tx,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip,
    output reg led_matrix_port,
    output reg [1:0] led_current_player,
    input [4:0] player_button,
    output reg [7:0] led_timer_output,
    output reg [1:0] led_timer_selector,
    output reg buzzer_output,
    input reset_button
  );
  
  
  
  reg rst;
  
  reg next;
  
  reg [15:0] debug_pcsel;
  
  reg [15:0] debug_asel;
  
  reg [15:0] debug_bsel;
  
  reg [15:0] debug_wdsel;
  
  reg [63:0] debug_reg_content;
  
  wire [32-1:0] M_motherboard_id;
  wire [32-1:0] M_motherboard_ia;
  wire [64-1:0] M_motherboard_debug;
  wire [64-1:0] M_motherboard_debug_reg_content;
  wire [1-1:0] M_motherboard_led_matrix_output;
  wire [2-1:0] M_motherboard_led_current_player;
  wire [8-1:0] M_motherboard_led_player_timer;
  wire [1-1:0] M_motherboard_buzzer_output;
  reg [1-1:0] M_motherboard_slowclk;
  reg [4-1:0] M_motherboard_debug_register_index;
  reg [5-1:0] M_motherboard_playerButtoninput;
  reg [1-1:0] M_motherboard_valid_led_on;
  reg [1-1:0] M_motherboard_buzzer_on;
  reg [1-1:0] M_motherboard_reset_signal;
  motherboard_1 motherboard (
    .clk(clk),
    .rst(rst),
    .slowclk(M_motherboard_slowclk),
    .debug_register_index(M_motherboard_debug_register_index),
    .playerButtoninput(M_motherboard_playerButtoninput),
    .valid_led_on(M_motherboard_valid_led_on),
    .buzzer_on(M_motherboard_buzzer_on),
    .reset_signal(M_motherboard_reset_signal),
    .id(M_motherboard_id),
    .ia(M_motherboard_ia),
    .debug(M_motherboard_debug),
    .debug_reg_content(M_motherboard_debug_reg_content),
    .led_matrix_output(M_motherboard_led_matrix_output),
    .led_current_player(M_motherboard_led_current_player),
    .led_player_timer(M_motherboard_led_player_timer),
    .buzzer_output(M_motherboard_buzzer_output)
  );
  
  reg M_next_button_d, M_next_button_q = 1'h0;
  
  wire [1-1:0] M_next_button_conditioner_out;
  reg [1-1:0] M_next_button_conditioner_in;
  button_conditioner_2 next_button_conditioner (
    .clk(clk),
    .in(M_next_button_conditioner_in),
    .out(M_next_button_conditioner_out)
  );
  
  wire [1-1:0] M_next_button_edge_out;
  reg [1-1:0] M_next_button_edge_in;
  edge_detector_3 next_button_edge (
    .clk(clk),
    .in(M_next_button_edge_in),
    .out(M_next_button_edge_out)
  );
  
  wire [1-1:0] M_player_button_conditioner0_out;
  reg [1-1:0] M_player_button_conditioner0_in;
  button_conditioner_2 player_button_conditioner0 (
    .clk(clk),
    .in(M_player_button_conditioner0_in),
    .out(M_player_button_conditioner0_out)
  );
  
  wire [1-1:0] M_player_button_conditioner1_out;
  reg [1-1:0] M_player_button_conditioner1_in;
  button_conditioner_2 player_button_conditioner1 (
    .clk(clk),
    .in(M_player_button_conditioner1_in),
    .out(M_player_button_conditioner1_out)
  );
  
  wire [1-1:0] M_player_button_conditioner2_out;
  reg [1-1:0] M_player_button_conditioner2_in;
  button_conditioner_2 player_button_conditioner2 (
    .clk(clk),
    .in(M_player_button_conditioner2_in),
    .out(M_player_button_conditioner2_out)
  );
  
  wire [1-1:0] M_player_button_conditioner3_out;
  reg [1-1:0] M_player_button_conditioner3_in;
  button_conditioner_2 player_button_conditioner3 (
    .clk(clk),
    .in(M_player_button_conditioner3_in),
    .out(M_player_button_conditioner3_out)
  );
  
  wire [1-1:0] M_player_button_conditioner4_out;
  reg [1-1:0] M_player_button_conditioner4_in;
  button_conditioner_2 player_button_conditioner4 (
    .clk(clk),
    .in(M_player_button_conditioner4_in),
    .out(M_player_button_conditioner4_out)
  );
  
  wire [1-1:0] M_reset_button_conditioner_out;
  reg [1-1:0] M_reset_button_conditioner_in;
  button_conditioner_2 reset_button_conditioner (
    .clk(clk),
    .in(M_reset_button_conditioner_in),
    .out(M_reset_button_conditioner_out)
  );
  
  wire [1-1:0] M_player_button_edgeDetector0_out;
  reg [1-1:0] M_player_button_edgeDetector0_in;
  edge_detector_3 player_button_edgeDetector0 (
    .clk(clk),
    .in(M_player_button_edgeDetector0_in),
    .out(M_player_button_edgeDetector0_out)
  );
  
  wire [1-1:0] M_player_button_edgeDetector1_out;
  reg [1-1:0] M_player_button_edgeDetector1_in;
  edge_detector_3 player_button_edgeDetector1 (
    .clk(clk),
    .in(M_player_button_edgeDetector1_in),
    .out(M_player_button_edgeDetector1_out)
  );
  
  wire [1-1:0] M_player_button_edgeDetector2_out;
  reg [1-1:0] M_player_button_edgeDetector2_in;
  edge_detector_3 player_button_edgeDetector2 (
    .clk(clk),
    .in(M_player_button_edgeDetector2_in),
    .out(M_player_button_edgeDetector2_out)
  );
  
  wire [1-1:0] M_player_button_edgeDetector3_out;
  reg [1-1:0] M_player_button_edgeDetector3_in;
  edge_detector_3 player_button_edgeDetector3 (
    .clk(clk),
    .in(M_player_button_edgeDetector3_in),
    .out(M_player_button_edgeDetector3_out)
  );
  
  wire [1-1:0] M_player_button_edgeDetector4_out;
  reg [1-1:0] M_player_button_edgeDetector4_in;
  edge_detector_3 player_button_edgeDetector4 (
    .clk(clk),
    .in(M_player_button_edgeDetector4_in),
    .out(M_player_button_edgeDetector4_out)
  );
  
  wire [1-1:0] M_reset_button_edgeDetector_out;
  reg [1-1:0] M_reset_button_edgeDetector_in;
  edge_detector_3 reset_button_edgeDetector (
    .clk(clk),
    .in(M_reset_button_edgeDetector_in),
    .out(M_reset_button_edgeDetector_out)
  );
  
  reg M_player_button0_d, M_player_button0_q = 1'h0;
  
  reg M_player_button1_d, M_player_button1_q = 1'h0;
  
  reg M_player_button2_d, M_player_button2_q = 1'h0;
  
  reg M_player_button3_d, M_player_button3_q = 1'h0;
  
  reg M_player_button4_d, M_player_button4_q = 1'h0;
  
  reg M_reset_button_dff_d, M_reset_button_dff_q = 1'h0;
  
  wire [28-1:0] M_frequency_divider_value;
  counter_4 frequency_divider (
    .clk(clk),
    .rst(rst),
    .value(M_frequency_divider_value)
  );
  
  wire [1-1:0] M_slowclock_edge_out;
  reg [1-1:0] M_slowclock_edge_in;
  edge_detector_3 slowclock_edge (
    .clk(clk),
    .in(M_slowclock_edge_in),
    .out(M_slowclock_edge_out)
  );
  
  wire [1-1:0] M_fastclock_edge_out;
  reg [1-1:0] M_fastclock_edge_in;
  edge_detector_3 fastclock_edge (
    .clk(clk),
    .in(M_fastclock_edge_in),
    .out(M_fastclock_edge_out)
  );
  
  wire [1-1:0] M_fpgaclock_edge_out;
  reg [1-1:0] M_fpgaclock_edge_in;
  edge_detector_3 fpgaclock_edge (
    .clk(clk),
    .in(M_fpgaclock_edge_in),
    .out(M_fpgaclock_edge_out)
  );
  
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_5 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_6 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  
  wire [7-1:0] M_external_seg_seg;
  wire [2-1:0] M_external_seg_sel;
  reg [8-1:0] M_external_seg_values;
  multi_seven_seg_7 external_seg (
    .clk(clk),
    .rst(rst),
    .values(M_external_seg_values),
    .seg(M_external_seg_seg),
    .sel(M_external_seg_sel)
  );
  
  always @* begin
    M_next_button_d = M_next_button_q;
    M_player_button4_d = M_player_button4_q;
    M_player_button0_d = M_player_button0_q;
    M_player_button1_d = M_player_button1_q;
    M_reset_button_dff_d = M_reset_button_dff_q;
    M_player_button2_d = M_player_button2_q;
    M_player_button3_d = M_player_button3_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    io_led = 24'h000000;
    usb_tx = usb_rx;
    io_seg = 8'hff;
    io_sel = 4'hf;
    led_timer_output = 8'hff;
    led_timer_selector = 4'hf;
    led = {3'h0, io_button};
    io_led[16+7+0-:1] = io_dip[16+7+0-:1];
    io_led[16+6+0-:1] = io_dip[16+6+0-:1];
    io_led[16+5+0-:1] = M_frequency_divider_value[27+0-:1];
    io_led[16+4+0-:1] = M_frequency_divider_value[25+0-:1];
    io_led[16+3+0-:1] = M_frequency_divider_value[1+0-:1];
    M_reset_button_conditioner_in = reset_button;
    M_player_button_conditioner0_in = player_button[0+0-:1];
    M_player_button_conditioner1_in = player_button[1+0-:1];
    M_player_button_conditioner2_in = player_button[2+0-:1];
    M_player_button_conditioner3_in = player_button[3+0-:1];
    M_player_button_conditioner4_in = player_button[4+0-:1];
    M_player_button_edgeDetector0_in = M_player_button_conditioner0_out;
    M_player_button_edgeDetector1_in = M_player_button_conditioner1_out;
    M_player_button_edgeDetector2_in = M_player_button_conditioner2_out;
    M_player_button_edgeDetector3_in = M_player_button_conditioner3_out;
    M_player_button_edgeDetector4_in = M_player_button_conditioner4_out;
    M_reset_button_edgeDetector_in = M_reset_button_conditioner_out;
    M_player_button0_d = M_player_button_edgeDetector0_out;
    M_player_button1_d = M_player_button_edgeDetector1_out;
    M_player_button2_d = M_player_button_edgeDetector2_out;
    M_player_button3_d = M_player_button_edgeDetector3_out;
    M_player_button4_d = M_player_button_edgeDetector4_out;
    M_reset_button_dff_d = M_reset_button_edgeDetector_out;
    M_motherboard_valid_led_on = io_dip[8+1+0-:1];
    M_motherboard_buzzer_on = io_dip[8+2+0-:1];
    led_matrix_port = M_motherboard_led_matrix_output;
    led_current_player[0+0-:1] = M_motherboard_led_current_player[0+0-:1];
    led_current_player[1+0-:1] = M_motherboard_led_current_player[1+0-:1];
    M_motherboard_playerButtoninput = {M_player_button4_q, M_player_button3_q, M_player_button2_q, M_player_button1_q, M_player_button0_q};
    M_motherboard_reset_signal = M_reset_button_dff_q;
    M_external_seg_values = {M_motherboard_led_player_timer[4+3-:4], M_motherboard_led_player_timer[0+3-:4]};
    led_timer_output = ~M_external_seg_seg;
    led_timer_selector = ~M_external_seg_sel;
    buzzer_output = M_motherboard_buzzer_output;
    io_led[16+1+0-:1] = player_button[0+0-:1];
    M_next_button_conditioner_in = 1'h0;
    if (io_dip[8+3+0-:1]) begin
      M_next_button_conditioner_in = io_button[4+0-:1];
    end
    M_next_button_edge_in = M_next_button_conditioner_out;
    M_next_button_d = M_next_button_edge_out;
    M_slowclock_edge_in = M_frequency_divider_value[27+0-:1];
    M_fastclock_edge_in = M_frequency_divider_value[25+0-:1];
    M_fpgaclock_edge_in = M_frequency_divider_value[1+0-:1];
    next = (M_slowclock_edge_out & io_dip[16+7+0-:1]) | M_next_button_q;
    if (io_dip[16+6+0-:1]) begin
      next = (M_fastclock_edge_out & io_dip[16+7+0-:1]) | M_next_button_q;
    end
    if (io_dip[16+5+0-:1]) begin
      next = (M_fpgaclock_edge_out & io_dip[16+7+0-:1]) | M_next_button_q;
    end
    M_motherboard_slowclk = next;
    M_motherboard_debug_register_index = 1'h0;
    M_seg_values = 16'h0000;
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
    debug_pcsel = M_motherboard_debug[0+15-:16];
    debug_asel = M_motherboard_debug[16+15-:16];
    debug_bsel = M_motherboard_debug[16+15-:16];
    debug_wdsel = M_motherboard_debug[16+15-:16];
    debug_reg_content = M_motherboard_debug_reg_content;
    
    case (io_dip[0+7-:8])
      8'h00: begin
        io_led[0+7-:8] = M_motherboard_id[16+7-:8];
        io_led[8+7-:8] = M_motherboard_id[24+7-:8];
        M_seg_values = {M_motherboard_id[28+3-:4], M_motherboard_id[24+3-:4], M_motherboard_id[20+3-:4], M_motherboard_id[16+3-:4]};
      end
      8'h01: begin
        io_led[0+7-:8] = M_motherboard_id[0+7-:8];
        io_led[8+7-:8] = M_motherboard_id[8+7-:8];
        M_seg_values = {M_motherboard_id[12+3-:4], M_motherboard_id[8+3-:4], M_motherboard_id[4+3-:4], M_motherboard_id[0+3-:4]};
      end
      8'h02: begin
        io_led[0+7-:8] = M_motherboard_ia[0+7-:8];
        io_led[8+7-:8] = M_motherboard_ia[8+7-:8];
        M_seg_values = {M_motherboard_ia[12+3-:4], M_motherboard_ia[8+3-:4], M_motherboard_ia[4+3-:4], M_motherboard_ia[0+3-:4]};
      end
      8'h09: begin
        io_led[0+7-:8] = debug_pcsel[0+7-:8];
        io_led[8+7-:8] = debug_pcsel[8+7-:8];
        M_seg_values = {debug_pcsel[12+3-:4], debug_pcsel[8+3-:4], debug_pcsel[4+3-:4], debug_pcsel[0+3-:4]};
      end
      8'h0a: begin
        io_led[0+7-:8] = debug_asel[0+7-:8];
        io_led[8+7-:8] = debug_asel[8+7-:8];
        M_seg_values = {debug_asel[12+3-:4], debug_asel[8+3-:4], debug_asel[4+3-:4], debug_asel[0+3-:4]};
      end
      8'h0b: begin
        io_led[0+7-:8] = debug_bsel[0+7-:8];
        io_led[8+7-:8] = debug_bsel[8+7-:8];
        M_seg_values = {debug_bsel[12+3-:4], debug_bsel[8+3-:4], debug_bsel[4+3-:4], debug_bsel[0+3-:4]};
      end
      8'h0c: begin
        io_led[0+7-:8] = debug_wdsel[0+7-:8];
        io_led[8+7-:8] = debug_wdsel[8+7-:8];
        M_seg_values = {debug_wdsel[12+3-:4], debug_wdsel[8+3-:4], debug_wdsel[4+3-:4], debug_wdsel[0+3-:4]};
      end
      8'h0d: begin
        io_led[0+7-:8] = M_motherboard_ia[24+7-:8];
        io_led[8+7-:8] = M_motherboard_ia[16+7-:8];
        M_seg_values = {M_motherboard_ia[28+3-:4], M_motherboard_ia[24+3-:4], M_motherboard_ia[20+3-:4], M_motherboard_ia[16+3-:4]};
      end
    endcase
    if (io_dip[8+0+0-:1]) begin
      
      case (io_dip[0+0+3-:4])
        4'h0: begin
          io_led[0+7-:8] = debug_reg_content[0+7-:8];
          io_led[8+7-:8] = debug_reg_content[8+7-:8];
          M_seg_values = {debug_reg_content[12+3-:4], debug_reg_content[8+3-:4], debug_reg_content[4+3-:4], debug_reg_content[0+3-:4]};
        end
        4'h1: begin
          io_led[0+7-:8] = debug_reg_content[16+7-:8];
          io_led[8+7-:8] = debug_reg_content[24+7-:8];
          M_seg_values = {debug_reg_content[28+3-:4], debug_reg_content[24+3-:4], debug_reg_content[20+3-:4], debug_reg_content[16+3-:4]};
        end
        4'h2: begin
          io_led[0+7-:8] = debug_reg_content[32+7-:8];
          io_led[8+7-:8] = debug_reg_content[40+7-:8];
          M_seg_values = {debug_reg_content[44+3-:4], debug_reg_content[40+3-:4], debug_reg_content[36+3-:4], debug_reg_content[32+3-:4]};
        end
        4'h3: begin
          io_led[0+7-:8] = debug_reg_content[48+7-:8];
          io_led[8+7-:8] = debug_reg_content[56+7-:8];
          M_seg_values = {debug_reg_content[60+3-:4], debug_reg_content[56+3-:4], debug_reg_content[52+3-:4], debug_reg_content[48+3-:4]};
        end
      endcase
      M_motherboard_debug_register_index = io_dip[0+4+3-:4];
    end
  end
  
  always @(posedge clk) begin
    M_reset_button_dff_q <= M_reset_button_dff_d;
  end
  
  
  always @(posedge clk) begin
    M_player_button0_q <= M_player_button0_d;
  end
  
  
  always @(posedge clk) begin
    M_player_button4_q <= M_player_button4_d;
  end
  
  
  always @(posedge clk) begin
    M_next_button_q <= M_next_button_d;
  end
  
  
  always @(posedge clk) begin
    M_player_button2_q <= M_player_button2_d;
  end
  
  
  always @(posedge clk) begin
    M_player_button1_q <= M_player_button1_d;
  end
  
  
  always @(posedge clk) begin
    M_player_button3_q <= M_player_button3_d;
  end
  
endmodule
