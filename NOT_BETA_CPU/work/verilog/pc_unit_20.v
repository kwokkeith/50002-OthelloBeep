/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module pc_unit_20 (
    input clk,
    input rst,
    input slowclk,
    input [17:0] id,
    input [2:0] pcsel,
    input [63:0] reg_data_1,
    output reg [31:0] pc_4,
    output reg [31:0] pc_4_sxtc,
    output reg [31:0] pcsel_out,
    output reg [31:0] ia,
    input reset_signal
  );
  
  
  
  reg [31:0] M_pc_d, M_pc_q = 1'h0;
  
  reg [31:0] pcsel_out_sig;
  
  reg [31:0] pc_4_sxtc_32_sig;
  
  reg [31:0] pc_4_sxtc_sig;
  
  reg [31:0] pc_4_sig;
  
  always @* begin
    M_pc_d = M_pc_q;
    
    pc_4_sig = 1'h0;
    pc_4_sxtc_sig = 1'h0;
    pcsel_out_sig = 1'h0;
    pc_4_sig = {M_pc_q[31+0-:1], M_pc_q[0+30-:31] + 3'h4};
    pc_4_sxtc_32_sig = M_pc_q + 3'h4 + (3'h4 * {{4'he{id[17+0-:1]}}, id});
    pc_4_sxtc_sig = pc_4_sxtc_32_sig;
    
    case (pcsel)
      3'h0: begin
        pcsel_out_sig = pc_4_sig;
      end
      3'h1: begin
        pcsel_out_sig = pc_4_sxtc_sig;
      end
      3'h2: begin
        pcsel_out_sig = reg_data_1[0+31-:32];
      end
      default: begin
        pcsel_out_sig = M_pc_q;
      end
    endcase
    if (slowclk) begin
      M_pc_d = {pcsel_out_sig[2+29-:30], 2'h0};
    end
    if (rst) begin
      M_pc_d = 4'h0;
    end
    if (reset_signal) begin
      M_pc_d = 4'h0;
    end
    ia = M_pc_q;
    pc_4 = pc_4_sig;
    pc_4_sxtc = pc_4_sxtc_sig;
    pcsel_out = pcsel_out_sig;
  end
  
  always @(posedge clk) begin
    M_pc_q <= M_pc_d;
  end
  
endmodule
