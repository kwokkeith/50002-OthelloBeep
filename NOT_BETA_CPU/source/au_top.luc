module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],     // DIP switches on IO Shield
    output led_matrix_port,          // (external) input to led matrix
    output led_current_player[2],    // (external) input to rgb led  
    input player_button[5],          // (external) input to the button handler when user presses a button to store into R5
    output led_timer_output[8],      // (external) output to the 7-segment led to indicate player timer 
    output led_timer_selector[2],    // (external) selector bit to choose 7-segment 
    output buzzer_output,            // (external) output bit for external buzzer
    input reset_button               // (external) Connected to external reset button to restart game
  ) {
  
  // helper signals
  sig rst;                  // reset signal
  sig next;                 // next instruction signal
  sig debug_pcsel[16];
  sig debug_asel[16];
  sig debug_bsel[16];
  sig debug_wdsel[16];
  sig debug_reg_content[64];  // for register content (debug)

  // motherboard
  motherboard motherboard(.clk(clk), .rst(rst));

  
  // manual next button to advance one instruction
  dff next_button(.clk(clk));
  button_conditioner next_button_conditioner(.clk(clk));
  edge_detector next_button_edge(#RISE(1), #FALL(0), .clk(clk));
  
  // Button conditioner for (external) player button input
  button_conditioner player_button_conditioner0(.clk(clk));
  button_conditioner player_button_conditioner1(.clk(clk));
  button_conditioner player_button_conditioner2(.clk(clk));
  button_conditioner player_button_conditioner3(.clk(clk));
  button_conditioner player_button_conditioner4(.clk(clk));
  button_conditioner reset_button_conditioner(.clk(clk));
  
  // Edge detector for (external) player button input
  edge_detector player_button_edgeDetector0(#RISE(1), #FALL(0), .clk(clk));
  edge_detector player_button_edgeDetector1(#RISE(1), #FALL(0), .clk(clk));
  edge_detector player_button_edgeDetector2(#RISE(1), #FALL(0), .clk(clk));
  edge_detector player_button_edgeDetector3(#RISE(1), #FALL(0), .clk(clk));
  edge_detector player_button_edgeDetector4(#RISE(1), #FALL(0), .clk(clk));
  edge_detector reset_button_edgeDetector(#RISE(1), #FALL(0), .clk(clk));
  
  // dff to store player button press
  dff player_button0(.clk(clk));
  dff player_button1(.clk(clk));
  dff player_button2(.clk(clk));
  dff player_button3(.clk(clk));
  dff player_button4(.clk(clk));
  dff reset_button_dff(.clk(clk));
  
  // to run beta at slower clock than FPGA clock
  counter frequency_divider(#SIZE(28), .clk(clk), .rst(rst));
  edge_detector slowclock_edge(#RISE(1), #FALL(0), .clk(clk));
  edge_detector fastclock_edge(#RISE(1), #FALL(0), .clk(clk)); 
  edge_detector fpgaclock_edge(#RISE(1), #FALL(0), .clk(clk));
 
  // OTHERS (for debug)
  multi_seven_seg seg(.clk(clk),.rst(rst));
  reset_conditioner reset_cond(.clk(clk));
  
  // EXTERNAL seven segment (Player timer)
  multi_seven_seg external_seg(#DIGITS(2), .clk(clk),.rst(rst));
  
  always {
    reset_cond.in = ~rst_n;   // input raw inverted reset signal
    rst = reset_cond.out;     // conditioned reset
    io_led = 3x{{h00}};       // turn all LED off at first
    usb_tx = usb_rx;          // loop serial port
    io_seg = 8hff; // connect segments to the driver
    io_sel = 4hf; // connect digit select to the driver
    led_timer_output = 8hff;
    led_timer_selector = 4hf;
    
    led = c{3b0, io_button};  // connect buttons to LEDs
    io_led[2][7] = io_dip[2][7]; // see toggle manual/auto mode
    io_led[2][6] = io_dip[2][6]; // see toggle fastclock 
    io_led[2][5] = frequency_divider.value[27]; 
    io_led[2][4] = frequency_divider.value[25]; 
    io_led[2][3] = frequency_divider.value[1]; 
    
    // External player button input
    reset_button_conditioner.in = reset_button;    // reset
    
    player_button_conditioner0.in = player_button[0];   // left
    player_button_conditioner1.in = player_button[1];   // right
    player_button_conditioner2.in = player_button[2];   // up
    player_button_conditioner3.in = player_button[3];   // down
    player_button_conditioner4.in = player_button[4];   // confirm
    
    player_button_edgeDetector0.in = player_button_conditioner0.out;
    player_button_edgeDetector1.in = player_button_conditioner1.out;
    player_button_edgeDetector2.in = player_button_conditioner2.out;
    player_button_edgeDetector3.in = player_button_conditioner3.out;
    player_button_edgeDetector4.in = player_button_conditioner4.out;
    reset_button_edgeDetector.in = reset_button_conditioner.out;
    
    player_button0.d = player_button_edgeDetector0.out;
    player_button1.d = player_button_edgeDetector1.out;
    player_button2.d = player_button_edgeDetector2.out;
    player_button3.d = player_button_edgeDetector3.out;
    player_button4.d = player_button_edgeDetector4.out;
    reset_button_dff.d = reset_button_edgeDetector.out;
    
    // ****** VALID LED MATRIX SIGNAL ******* //
    motherboard.valid_led_on = io_dip[1][1];
    motherboard.buzzer_on = io_dip[1][2];
    
    // ****** Motherboard connections *******
    led_matrix_port = motherboard.led_matrix_output;           // bits required for bitbanging of led matrix from the output handler
    led_current_player[0] = motherboard.led_current_player[0]; // Red: Player 1
    led_current_player[1] = motherboard.led_current_player[1]; // Blue: Player ws2812b_writer
    motherboard.playerButtoninput = c{player_button4.q, player_button3.q, 
                                      player_button2.q, player_button1.q, 
                                      player_button0.q};
    motherboard.reset_signal = reset_button_dff.q;        // To trigger reset of game
    
    external_seg.values = {motherboard.led_player_timer[7:4], motherboard.led_player_timer[3:0]};
    led_timer_output = ~external_seg.seg;        // External timer 7-segment led
    led_timer_selector = ~external_seg.sel;
    

    buzzer_output = motherboard.buzzer_output;   // Output bit for external buzzer 
      
    // For debugging
    io_led[2][1] = player_button[0];
    
    // next button
    next_button_conditioner.in = b0;
    if (io_dip[1][3]){      // set to change io_button to allow for next instruction move
      next_button_conditioner.in = io_button[4];
    }
    next_button_edge.in = next_button_conditioner.out;
    next_button.d = next_button_edge.out;
    
    // driving the beta 
    slowclock_edge.in = frequency_divider.value[27];
    fastclock_edge.in = frequency_divider.value[25];
    fpgaclock_edge.in = frequency_divider.value[1];

    next = (slowclock_edge.out & io_dip[2][7]) | next_button.q; // proceed either when next button is pressed or io_dip[2][7] is 1

    if (io_dip[2][6]){ // want faster clock
     next = (fastclock_edge.out & io_dip[2][7]) | next_button.q; 
    }
    
    if (io_dip[2][5]){
      next = (fpgaclock_edge.out & io_dip[2][7]) | next_button.q; 
    }
    
    motherboard.slowclk = next;
    motherboard.debug_register_index = b0;
    
    // debugger to view Beta state    
    seg.values = {4b0,4b0,4b0,4b0};
    io_seg = ~seg.seg;
    io_sel = ~seg.sel;
    
    debug_pcsel = motherboard.debug[0];
    debug_asel = motherboard.debug[1];
    debug_bsel = motherboard.debug[1];
    debug_wdsel = motherboard.debug[1];
    debug_reg_content = motherboard.debug_reg_content;
    
    case (io_dip[0]){
      h00: // MSB 16 bits of current instruction (id[31:16])
        io_led[0] = motherboard.id[23:16];
        io_led[1] = motherboard.id[31:24];
        seg.values = {motherboard.id[31:28], motherboard.id[27:24], motherboard.id[23:20], motherboard.id[19:16]};
        
      h01: // LSB 16 bits of current instruction (id[15:0])
        io_led[0] = motherboard.id[7:0];
        io_led[1] = motherboard.id[15:8];
        seg.values = {motherboard.id[15:12], motherboard.id[11:8], motherboard.id[7:4], motherboard.id[3:0]}; 
      h02: // LSB 16 bits of instruction address (ia[15:0])
        io_led[0] = motherboard.ia[7:0];
        io_led[1] = motherboard.ia[15:8];
        seg.values = {motherboard.ia[15:12], motherboard.ia[11:8], motherboard.ia[7:4], motherboard.ia[3:0]};
      h09: // LSB 16 bits of pcsel_out
        io_led[0] = debug_pcsel[7:0];
        io_led[1] = debug_pcsel[15:8];
        seg.values = {debug_pcsel[15:12], debug_pcsel[11:8], debug_pcsel[7:4], debug_pcsel[3:0]};
      h0A: // LSB 16 bits of asel_out
        io_led[0] = debug_asel[7:0];
        io_led[1] = debug_asel[15:8];
        seg.values = {debug_asel[15:12], debug_asel[11:8], debug_asel[7:4], debug_asel[3:0]};
      h0B: // LSB 16 bits of bsel_out
        io_led[0] = debug_bsel[7:0];
        io_led[1] = debug_bsel[15:8];
        seg.values = {debug_bsel[15:12], debug_bsel[11:8], debug_bsel[7:4], debug_bsel[3:0]};
      h0C: // LSB 16 bits of wdsel_out
        io_led[0] = debug_wdsel[7:0];
        io_led[1] = debug_wdsel[15:8];
        seg.values = {debug_wdsel[15:12], debug_wdsel[11:8], debug_wdsel[7:4], debug_wdsel[3:0]};
      h0D: // MSB 16 bits of instruction address. Useful to see PC31 (kernel/user mode) (ia[31:16])
        io_led[0] = motherboard.ia[31:24];
        io_led[1] = motherboard.ia[23:16];
        seg.values = {motherboard.ia[31:28], motherboard.ia[27:24], motherboard.ia[23:20], motherboard.ia[19:16]}; 
    }   
    
    // For register mode
    if (io_dip[1][0]){      // set to change io_button to allow for next instruction move
      case (io_dip[0][3:0]){
        h0:  // Reg[15:0]
          io_led[0] = debug_reg_content[7:0];
          io_led[1] = debug_reg_content[15:8];
          seg.values = {debug_reg_content[15:12], debug_reg_content[11:8], debug_reg_content[7:4], debug_reg_content[3:0]};
        h1:  // Reg[31:16]
          io_led[0] = debug_reg_content[23:16];
          io_led[1] = debug_reg_content[31:24];
          seg.values = {debug_reg_content[31:28], debug_reg_content[27:24], debug_reg_content[23:20], debug_reg_content[19:16]};
        h2:  // Reg[47:32]
          io_led[0] = debug_reg_content[39:32];
          io_led[1] = debug_reg_content[47:40];
          seg.values = {debug_reg_content[47:44], debug_reg_content[43:40], debug_reg_content[39:36], debug_reg_content[35:32]};
        h3: // Reg[63:48]
          io_led[0] = debug_reg_content[55:48];
          io_led[1] = debug_reg_content[63:56];
          seg.values = {debug_reg_content[63:60], debug_reg_content[59:56], debug_reg_content[55:52], debug_reg_content[51:48]};
       }
      
        motherboard.debug_register_index = io_dip[0][7:4];  // To choose register index
      
      }
     }
      // DIP switch debugging
        // b00000000: MSB 16 bits of current instruction (id[31:16])
        // b00000001: LSB 16 bits of current instruction (id[15:0])
          
 }
